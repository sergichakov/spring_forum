package com.forum.directory.web.controller;

import com.forum.directory.kafka.event.Directories;
import com.forum.directory.kafka.event.OperationDirectoryKafka;
import com.forum.directory.web.service.DirectoryWebService;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.Import;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.test.EmbeddedKafkaBroker;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@Import(WebControllerKafkaConfiguration.class)
@WebMvcTest(properties = {"spring.kafka.producer.bootstrap-servers-${spring.embedded.kafka.brokers}"
,"eureka.client.enabled=false"})
@ActiveProfiles("test")
@EmbeddedKafka(partitions = 2, count = 3, controlledShutdown = true,
        topics = {"${kafka.topic.product.request}", "${kafka.topic.product.reply}"}, kraft = true,
        brokerProperties = {"transaction.state.log.replication.factor=3", "transaction.state.log.min.isr=1",
                "log.dir=/home/user/out/embedded-kafka"})
//@SpringBootTest(properties={"spring.kafka.producer.bootstrap-servers-${spring.embedded.kafka.brokers}", "eureka.client.enabled=false"})////,classes = ProductServiceImpl.class)
public class DirectoryWebControllerIntegrationTest {
    @Autowired
    public EmbeddedKafkaBroker embeddedKafkaBroker;
    @Autowired
    MockMvc mvc;
    @Autowired
    private DirectoryWebService directoryWebService;
@Disabled
    @Test
    public void shouldHaveEqualFieldesWhenSend() throws Exception {
        mvc.perform(get("/directoriesweb")).andExpect(status().isOk());
    }


    public class ActionListener {
        @KafkaListener(topics = "${kafka.topic.product.request}", containerFactory = "requestReplyListenerContainerFactory")
        @SendTo
        public Directories listenConsumerRecord(ConsumerRecord<String, Directories> record) {
            Directories directoriesResult = new Directories();
            Directories directories = record.value();
            directoriesResult.setOperation(OperationDirectoryKafka.SUCCESS);
            directoriesResult.setMax(0L);
            directoriesResult.setDirectories(directories.getDirectories());
            directoriesResult.setPage(directories.getPage());
            directoriesResult.setNumberPerPage(directories.getNumberPerPage());

            return directories;
        }
    }
//
}
